using System;
using System.Diagnostics;
using System.Text;
using System.Threading;
using System.Windows;
using System.Windows.Controls;

namespace iNet
{
    /// <summary>
    /// iNet.xaml 的交互逻辑
    /// </summary>
    public partial class iNetSimple : UserControl
    {

        public byte[] testbuf2 = new byte[232] {
            0x80 , 0x5A , 0x5A , 0x04 , 0x03 , 0x02 , 0x01 , 0xA0, 0xA0 , 0xA0, 0xA0 , 0x11 , 0x01, 0x11 , 0x00 , 0x00 , 0x00, 0x00 , 0x00 , 0x00 , 0x00 , 0x00, 0x00, 0x00, 0x82, 0x1A, 0x50, 0xCE, 0xE3, 0x1D, 0xC8, 0x00,
            0xEB , 0x90 , 0xDC , 0x32 , 0x01 , 0x35 , 0x01 , 0xC5, 0x06 , 0xCD, 0x06 , 0x75 , 0x05, 0x15 , 0x07 , 0xE1 , 0x07, 0xE1 , 0x07 , 0xE1 , 0x04 , 0x6D, 0x0B, 0x09, 0x03, 0x25, 0x09, 0x65, 0x0B, 0xB9, 0x05, 0xE1,
            0x04 , 0x71 , 0x07 , 0xC1 , 0x03 , 0xDD , 0x00 , 0x05, 0x03 , 0x51, 0x09 , 0xC5 , 0x0B, 0x9D , 0x0A , 0x41 , 0x03, 0xA1 , 0x01 , 0x21 , 0x07 , 0xD5, 0x04, 0xD5, 0x03, 0x85, 0x00, 0x05, 0x01, 0x0D, 0x07, 0x99,
            0x00 , 0x11 , 0x07 , 0x65 , 0x01 , 0x11 , 0x01 , 0x05, 0x01 , 0x05, 0x01 , 0x05 , 0x01, 0x0D , 0x01 , 0x0D , 0x01, 0x0D , 0x01 , 0x0D , 0x01 , 0x0D, 0x07, 0xE1, 0x0E, 0x89, 0x07, 0xE5, 0x07, 0xE1, 0x07, 0xE1,
            0x07 , 0xE1 , 0x00 , 0x11 , 0x01 , 0x0D , 0x11 , 0x55, 0x63 , 0x01, 0x01 , 0x05 , 0x0B, 0x5B , 0xD9 , 0xC2 , 0x00, 0x00 , 0x00 , 0x00 , 0x00 , 0x54, 0x9F, 0x40, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xBA, 0x17, 0x41,
            0x3B , 0x8B , 0xDE , 0xA9 , 0xD8 , 0x9A , 0xB4 , 0x40, 0xA5 , 0x82, 0x8A , 0xAA , 0x0F, 0xFF , 0xAF , 0x40 , 0x9E, 0xD0 , 0xEB , 0x4F , 0xE2 , 0x93, 0x27, 0x40, 0xFA, 0xB3, 0x1F, 0x29, 0x22, 0x43, 0xED, 0x3F,
            0x7F , 0xC2 , 0xD9 , 0xAD , 0x65 , 0x32 , 0xF3 , 0xBF, 0x03 , 0xEE, 0x79 , 0xFE , 0xB4, 0xA1 , 0x1E , 0x40 , 0x3A, 0x65 , 0xDB , 0xC6 , 0xA6 , 0x89, 0x81, 0xBF, 0x00, 0x65, 0x92, 0xE7, 0xC7, 0x13, 0x08, 0x40,
            0xF1 , 0x4F , 0x1D , 0x7B , 0x9C , 0x18 , 0x00 , 0x40};


        public byte[] testbuf = new byte[224] {
            0x80 , 0x5A , 0x5A , 0x04 , 0x03 , 0x02 , 0x01 , 0xA0, 0xA0 , 0xA0, 0xA0 , 0x11 , 0x01, 0x11 , 0x00 , 0x00 , 0x00, 0x00 , 0x00 , 0x00 , 0x00 , 0x00, 0x00, 0x00, 0x82, 0x1A, 0x50, 0xCE, 0xE3, 0x1D, 0xB8, 0x00,
            0xEB , 0x90 , 0xDC , 0x32 , 0x01 , 0x35 , 0x07 , 0xE1 , 0x07, 0xE1 , 0x07 , 0xE1 , 0x04 , 0x6D, 0x0B, 0x09, 0x03, 0x25, 0x09, 0x65, 0x0B, 0xB9, 0x05, 0xE1,
            0x04 , 0x71 , 0x07 , 0xC1 , 0x03 , 0xDD , 0x00 , 0x05, 0x03 , 0x51, 0x09 , 0xC5 , 0x0B, 0x9D , 0x0A , 0x41 , 0x03, 0xA1 , 0x01 , 0x21 , 0x07 , 0xD5, 0x04, 0xD5, 0x03, 0x85, 0x00, 0x05, 0x01, 0x0D, 0x07, 0x99,
            0x00 , 0x11 , 0x07 , 0x65 , 0x01 , 0x11 , 0x01 , 0x05, 0x01 , 0x05, 0x01 , 0x05 , 0x01, 0x0D , 0x01 , 0x0D , 0x01, 0x0D , 0x01 , 0x0D , 0x01 , 0x0D, 0x07, 0xE1, 0x0E, 0x89, 0x07, 0xE5, 0x07, 0xE1, 0x07, 0xE1,
            0x07 , 0xE1 , 0x00 , 0x11 , 0x01 , 0x0D , 0x11 , 0x55, 0x63 , 0x01, 0x01 , 0x05 , 0x0B, 0x5B , 0xD9 , 0xC2 , 0x00, 0x00 , 0x00 , 0x00 , 0x00 , 0x54, 0x9F, 0x40, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xBA, 0x17, 0x41,
            0x3B , 0x8B , 0xDE , 0xA9 , 0xD8 , 0x9A , 0xB4 , 0x40, 0xA5 , 0x82, 0x8A , 0xAA , 0x0F, 0xFF , 0xAF , 0x40 , 0x9E, 0xD0 , 0xEB , 0x4F , 0xE2 , 0x93, 0x27, 0x40, 0xFA, 0xB3, 0x1F, 0x29, 0x22, 0x43, 0xED, 0x3F,
            0x7F , 0xC2 , 0xD9 , 0xAD , 0x65 , 0x32 , 0xF3 , 0xBF, 0x03 , 0xEE, 0x79 , 0xFE , 0xB4, 0xA1 , 0x1E , 0x40 , 0x3A, 0x65 , 0xDB , 0xC6 , 0xA6 , 0x89, 0x81, 0xBF, 0x00, 0x65, 0x92, 0xE7, 0xC7, 0x13, 0x08, 0x40,
            0xF1 , 0x4F , 0x1D , 0x7B , 0x9C , 0x18 , 0x00 , 0x40};

        public byte[] testbuf3 = new byte[216]
        {
            0x80 , 0x5A , 0x5A , 0x04 , 0x03 , 0x02 , 0x01 , 0xA0, 0xA0 , 0xA0, 0xA0 , 0x11 , 0x01, 0x11 , 0x00 , 0x00 , 0x00, 0x00 , 0x00 , 0x00 , 0x00 , 0x00, 0x00, 0x00, 0x82, 0x1A, 0x50, 0xCE, 0xE3, 0x1D, 0xB8, 0x00,
            0x42, 0x01, 0xE1, 0x05, 0x05, 0x18, 0x00, 0x01 , 0x00 , 0x00 , 0x00, 0xC4 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xD9 , 0x84 , 0x55 , 0x7C , 0xF1 , 0x11 , 0x00 , 0x00 , 0x60 , 0x01 , 0x04 , 0x00 , 0x10 , 0x10 , 0x1C , 0x00 , 0x1D , 0x00,
            0x23, 0x00, 0x21, 0x00, 0x22, 0x00, 0x22, 0x00 , 0x00 , 0x00 , 0x00, 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xC5 , 0x09 , 0xCC , 0x09 , 0xC8 , 0x09 , 0x45 , 0x01 , 0xD0 , 0x09 , 0xC5 , 0x09 , 0xFD , 0x01 , 0xB2 , 0x1C , 0x50 , 0x01 , 0x02 , 0x00 , 0x01 , 0x00 , 0x02 , 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00 , 0x01 , 0x00 , 0x70, 0x00 , 0x23 , 0x00 , 0x21 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 , 0x00 , 0x00 , 0x00, 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xB8 , 0x06 , 0x00 , 0x00 , 0x00 , 0x80 , 0x02 , 0xE0 , 0x61 , 0x00 , 0xC2 , 0x00 , 0xC0 , 0x49 , 0x02 , 0x00 , 0x0C , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        public string iNet_Type
        {
            get { return cB_socket.Text; }
        }
        public string iNet_IP
        {
            get { return tB_IP.Text; }
        }

        public string iNet_UP_NO
        {
            get { return tB_up_No.Text; }
        }

        public string iNet_DOWN_NO
        {
            get { return tB_down_No.Text; }
        }

        public string sendBuffer
        {
            get { return tB_sendbuf.Text; }
        }

        public iNetSimple()
        {
            InitializeComponent();
        }

        public delegate void OpenClickEventHandler(object sender, RoutedEventArgs e);
        public delegate void CloseClickEventHandler(object sender, RoutedEventArgs e);
        public delegate void SendClickEventHandler();
       
        public event OpenClickEventHandler OpenHandler;
        public event CloseClickEventHandler CloseHandler;
        public event SendClickEventHandler SendHandler;



        public void iNetInitz(string header = "网络设置", string ip = "192.168.1.1", string Upport = "8000",string Downport="8001")
        {
            gB_iNet.Header = header;
            tB_IP.Text = ip;
            tB_up_No.Text = Upport;
            tB_down_No.Text = Downport;

            string[] plist = new string[2] { "TCP", "UDP" };


            cB_socket.SelectedIndex = 1;
            cB_socket.ItemsSource = plist;
            cB_socket.SelectedIndex = cB_socket.Items.Count > 0 ? 1 : -1;
        }


        public void setTextWidth(double width)
        {
            tB_recbuf.Width = (width- 250)/2;
            tB_sendbuf.Width = (width -250) / 2;
        }

        private void btn_Net_open_Click(object sender, RoutedEventArgs e)
        {
            OpenHandler(sender, e);
        }

        private void btn_Net_close_Click(object sender, RoutedEventArgs e)
        {
            CloseHandler(sender, e);
        }

        private void btn_net_send_Click(object sender, RoutedEventArgs e)
        {
            SendHandler();
        }

        private void btn_clear_rec_Click(object sender, RoutedEventArgs e)
        {
            builder.Clear();
            tB_recbuf.Clear();
        }





        public void ShowMsg(string str)
        {
            new Thread(() =>
            {
                this.Dispatcher.Invoke(new Action(() =>
                {
                  
                    tB_recbuf.AppendText(str + "\r\n");
                    tB_recbuf.ScrollToEnd();

                }));
            }).Start();

        }


        private StringBuilder builder = new StringBuilder(); //格式化串口接收缓冲

        public void ShowMsg(byte[] buf)
        {
            try
            {
                new Thread(() =>
                {
                    this.Dispatcher.Invoke(new Action(() =>
                    {

                        foreach (byte b in buf)
                        {
                            builder.Append(b.ToString("X2") + " ");

                        }
                        builder.Append('\n');
                        tB_recbuf.AppendText(builder.ToString());

                        tB_recbuf.ScrollToEnd();

                    }));
                }).Start();
            }
            catch(Exception ex)
            {
                Trace.WriteLine("接收缓冲区错误:" + ex.Message);
                tB_recbuf.Clear();
            }


        }
    }
}
