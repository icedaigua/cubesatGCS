// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace TSFCS.DMDS.Client {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class SendMsg {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Client.SendMsg, global::TSFCS.DMDS.Client.SendMsg.Builder> internal__static_TSFCS_DMDS_Server_SendMsg__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TSFCS_DMDS_Server_SendMsg_BVal__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Client.SendMsg.Types.BVal, global::TSFCS.DMDS.Client.SendMsg.Types.BVal.Builder> internal__static_TSFCS_DMDS_Server_SendMsg_BVal__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TSFCS_DMDS_Server_SendMsg_NVal__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Client.SendMsg.Types.NVal, global::TSFCS.DMDS.Client.SendMsg.Types.NVal.Builder> internal__static_TSFCS_DMDS_Server_SendMsg_NVal__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TSFCS_DMDS_Server_SendMsg_LVal__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Client.SendMsg.Types.LVal, global::TSFCS.DMDS.Client.SendMsg.Types.LVal.Builder> internal__static_TSFCS_DMDS_Server_SendMsg_LVal__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TSFCS_DMDS_Server_SendMsg_FVal__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Client.SendMsg.Types.FVal, global::TSFCS.DMDS.Client.SendMsg.Types.FVal.Builder> internal__static_TSFCS_DMDS_Server_SendMsg_FVal__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TSFCS_DMDS_Server_SendMsg_DVal__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Client.SendMsg.Types.DVal, global::TSFCS.DMDS.Client.SendMsg.Types.DVal.Builder> internal__static_TSFCS_DMDS_Server_SendMsg_DVal__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TSFCS_DMDS_Server_SendMsg_SVal__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Client.SendMsg.Types.SVal, global::TSFCS.DMDS.Client.SendMsg.Types.SVal.Builder> internal__static_TSFCS_DMDS_Server_SendMsg_SVal__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static SendMsg() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "Cg1TZW5kTXNnLnByb3RvEhFUU0ZDUy5ETURTLlNlcnZlciLFBAoHU2VuZE1z", 
              "ZxIMCgR0eXBlGAEgAigJEioKAWIYAiADKAsyHy5UU0ZDUy5ETURTLlNlcnZl", 
              "ci5TZW5kTXNnLkJWYWwSKgoBbhgDIAMoCzIfLlRTRkNTLkRNRFMuU2VydmVy", 
              "LlNlbmRNc2cuTlZhbBIqCgFsGAQgAygLMh8uVFNGQ1MuRE1EUy5TZXJ2ZXIu", 
              "U2VuZE1zZy5MVmFsEioKAWYYBSADKAsyHy5UU0ZDUy5ETURTLlNlcnZlci5T", 
              "ZW5kTXNnLkZWYWwSKgoBZBgGIAMoCzIfLlRTRkNTLkRNRFMuU2VydmVyLlNl", 
              "bmRNc2cuRFZhbBIqCgFzGAcgAygLMh8uVFNGQ1MuRE1EUy5TZXJ2ZXIuU2Vu", 
              "ZE1zZy5TVmFsGi8KBEJWYWwSCgoCbm8YASABKAUSCwoDdmFsGAIgAigIEg4K", 
              "BmV4Y2VlZBgDIAEoBRovCgROVmFsEgoKAm5vGAEgASgFEgsKA3ZhbBgCIAIo", 
              "ERIOCgZleGNlZWQYAyABKAUaLwoETFZhbBIKCgJubxgBIAEoBRILCgN2YWwY", 
              "AiACKBISDgoGZXhjZWVkGAMgASgFGi8KBEZWYWwSCgoCbm8YASABKAUSCwoD", 
              "dmFsGAIgAigCEg4KBmV4Y2VlZBgDIAEoBRovCgREVmFsEgoKAm5vGAEgASgF", 
              "EgsKA3ZhbBgCIAIoARIOCgZleGNlZWQYAyABKAUaLwoEU1ZhbBIKCgJubxgB", 
            "IAEoBRILCgN2YWwYAiACKAkSDgoGZXhjZWVkGAMgASgF"));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor = Descriptor.MessageTypes[0];
          internal__static_TSFCS_DMDS_Server_SendMsg__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Server.SendMsg, global::TSFCS.DMDS.Server.SendMsg.Builder>(internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor,
                  new string[] { "Type", "B", "N", "L", "F", "D", "S", });
          internal__static_TSFCS_DMDS_Server_SendMsg_BVal__Descriptor = internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor.NestedTypes[0];
          internal__static_TSFCS_DMDS_Server_SendMsg_BVal__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Server.SendMsg.Types.BVal, global::TSFCS.DMDS.Server.SendMsg.Types.BVal.Builder>(internal__static_TSFCS_DMDS_Server_SendMsg_BVal__Descriptor,
                  new string[] { "No", "Val", "Exceed", });
          internal__static_TSFCS_DMDS_Server_SendMsg_NVal__Descriptor = internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor.NestedTypes[1];
          internal__static_TSFCS_DMDS_Server_SendMsg_NVal__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Server.SendMsg.Types.NVal, global::TSFCS.DMDS.Server.SendMsg.Types.NVal.Builder>(internal__static_TSFCS_DMDS_Server_SendMsg_NVal__Descriptor,
                  new string[] { "No", "Val", "Exceed", });
          internal__static_TSFCS_DMDS_Server_SendMsg_LVal__Descriptor = internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor.NestedTypes[2];
          internal__static_TSFCS_DMDS_Server_SendMsg_LVal__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Server.SendMsg.Types.LVal, global::TSFCS.DMDS.Server.SendMsg.Types.LVal.Builder>(internal__static_TSFCS_DMDS_Server_SendMsg_LVal__Descriptor,
                  new string[] { "No", "Val", "Exceed", });
          internal__static_TSFCS_DMDS_Server_SendMsg_FVal__Descriptor = internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor.NestedTypes[3];
          internal__static_TSFCS_DMDS_Server_SendMsg_FVal__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Server.SendMsg.Types.FVal, global::TSFCS.DMDS.Server.SendMsg.Types.FVal.Builder>(internal__static_TSFCS_DMDS_Server_SendMsg_FVal__Descriptor,
                  new string[] { "No", "Val", "Exceed", });
          internal__static_TSFCS_DMDS_Server_SendMsg_DVal__Descriptor = internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor.NestedTypes[4];
          internal__static_TSFCS_DMDS_Server_SendMsg_DVal__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Server.SendMsg.Types.DVal, global::TSFCS.DMDS.Server.SendMsg.Types.DVal.Builder>(internal__static_TSFCS_DMDS_Server_SendMsg_DVal__Descriptor,
                  new string[] { "No", "Val", "Exceed", });
          internal__static_TSFCS_DMDS_Server_SendMsg_SVal__Descriptor = internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor.NestedTypes[5];
          internal__static_TSFCS_DMDS_Server_SendMsg_SVal__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::TSFCS.DMDS.Server.SendMsg.Types.SVal, global::TSFCS.DMDS.Server.SendMsg.Types.SVal.Builder>(internal__static_TSFCS_DMDS_Server_SendMsg_SVal__Descriptor,
                  new string[] { "No", "Val", "Exceed", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendMsg : pb::GeneratedMessage<SendMsg, SendMsg.Builder> {
    private SendMsg() { }
    private static readonly SendMsg defaultInstance = new SendMsg().MakeReadOnly();
    private static readonly string[] _sendMsgFieldNames = new string[] { "b", "d", "f", "l", "n", "s", "type" };
    private static readonly uint[] _sendMsgFieldTags = new uint[] { 18, 50, 42, 34, 26, 58, 10 };
    public static SendMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendMsg, SendMsg.Builder> InternalFieldAccessors {
      get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class BVal : pb::GeneratedMessage<BVal, BVal.Builder> {
        private BVal() { }
        private static readonly BVal defaultInstance = new BVal().MakeReadOnly();
        private static readonly string[] _bValFieldNames = new string[] { "exceed", "no", "val" };
        private static readonly uint[] _bValFieldTags = new uint[] { 24, 8, 16 };
        public static BVal DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override BVal DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override BVal ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_BVal__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<BVal, BVal.Builder> InternalFieldAccessors {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_BVal__FieldAccessorTable; }
        }
        
        public const int NoFieldNumber = 1;
        private bool hasNo;
        private int no_;
        public bool HasNo {
          get { return hasNo; }
        }
        public int No {
          get { return no_; }
        }
        
        public const int ValFieldNumber = 2;
        private bool hasVal;
        private bool val_;
        public bool HasVal {
          get { return hasVal; }
        }
        public bool Val {
          get { return val_; }
        }
        
        public const int ExceedFieldNumber = 3;
        private bool hasExceed;
        private int exceed_;
        public bool HasExceed {
          get { return hasExceed; }
        }
        public int Exceed {
          get { return exceed_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasVal) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _bValFieldNames;
          if (hasNo) {
            output.WriteInt32(1, field_names[1], No);
          }
          if (hasVal) {
            output.WriteBool(2, field_names[2], Val);
          }
          if (hasExceed) {
            output.WriteInt32(3, field_names[0], Exceed);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasNo) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, No);
          }
          if (hasVal) {
            size += pb::CodedOutputStream.ComputeBoolSize(2, Val);
          }
          if (hasExceed) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, Exceed);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static BVal ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BVal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BVal ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BVal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BVal ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BVal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static BVal ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static BVal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static BVal ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BVal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private BVal MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(BVal prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<BVal, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(BVal cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private BVal result;
          
          private BVal PrepareBuilder() {
            if (resultIsReadOnly) {
              BVal original = result;
              result = new BVal();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override BVal MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.BVal.Descriptor; }
          }
          
          public override BVal DefaultInstanceForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.BVal.DefaultInstance; }
          }
          
          public override BVal BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is BVal) {
              return MergeFrom((BVal) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(BVal other) {
            if (other == global::TSFCS.DMDS.Server.SendMsg.Types.BVal.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNo) {
              No = other.No;
            }
            if (other.HasVal) {
              Val = other.Val;
            }
            if (other.HasExceed) {
              Exceed = other.Exceed;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_bValFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _bValFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasNo = input.ReadInt32(ref result.no_);
                  break;
                }
                case 16: {
                  result.hasVal = input.ReadBool(ref result.val_);
                  break;
                }
                case 24: {
                  result.hasExceed = input.ReadInt32(ref result.exceed_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNo {
            get { return result.hasNo; }
          }
          public int No {
            get { return result.No; }
            set { SetNo(value); }
          }
          public Builder SetNo(int value) {
            PrepareBuilder();
            result.hasNo = true;
            result.no_ = value;
            return this;
          }
          public Builder ClearNo() {
            PrepareBuilder();
            result.hasNo = false;
            result.no_ = 0;
            return this;
          }
          
          public bool HasVal {
            get { return result.hasVal; }
          }
          public bool Val {
            get { return result.Val; }
            set { SetVal(value); }
          }
          public Builder SetVal(bool value) {
            PrepareBuilder();
            result.hasVal = true;
            result.val_ = value;
            return this;
          }
          public Builder ClearVal() {
            PrepareBuilder();
            result.hasVal = false;
            result.val_ = false;
            return this;
          }
          
          public bool HasExceed {
            get { return result.hasExceed; }
          }
          public int Exceed {
            get { return result.Exceed; }
            set { SetExceed(value); }
          }
          public Builder SetExceed(int value) {
            PrepareBuilder();
            result.hasExceed = true;
            result.exceed_ = value;
            return this;
          }
          public Builder ClearExceed() {
            PrepareBuilder();
            result.hasExceed = false;
            result.exceed_ = 0;
            return this;
          }
        }
        static BVal() {
          object.ReferenceEquals(global::TSFCS.DMDS.Server.Proto.SendMsg.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class NVal : pb::GeneratedMessage<NVal, NVal.Builder> {
        private NVal() { }
        private static readonly NVal defaultInstance = new NVal().MakeReadOnly();
        private static readonly string[] _nValFieldNames = new string[] { "exceed", "no", "val" };
        private static readonly uint[] _nValFieldTags = new uint[] { 24, 8, 16 };
        public static NVal DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override NVal DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override NVal ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_NVal__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<NVal, NVal.Builder> InternalFieldAccessors {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_NVal__FieldAccessorTable; }
        }
        
        public const int NoFieldNumber = 1;
        private bool hasNo;
        private int no_;
        public bool HasNo {
          get { return hasNo; }
        }
        public int No {
          get { return no_; }
        }
        
        public const int ValFieldNumber = 2;
        private bool hasVal;
        private int val_;
        public bool HasVal {
          get { return hasVal; }
        }
        public int Val {
          get { return val_; }
        }
        
        public const int ExceedFieldNumber = 3;
        private bool hasExceed;
        private int exceed_;
        public bool HasExceed {
          get { return hasExceed; }
        }
        public int Exceed {
          get { return exceed_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasVal) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _nValFieldNames;
          if (hasNo) {
            output.WriteInt32(1, field_names[1], No);
          }
          if (hasVal) {
            output.WriteSInt32(2, field_names[2], Val);
          }
          if (hasExceed) {
            output.WriteInt32(3, field_names[0], Exceed);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasNo) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, No);
          }
          if (hasVal) {
            size += pb::CodedOutputStream.ComputeSInt32Size(2, Val);
          }
          if (hasExceed) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, Exceed);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static NVal ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NVal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NVal ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NVal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NVal ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NVal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static NVal ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static NVal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static NVal ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NVal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private NVal MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(NVal prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NVal, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(NVal cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private NVal result;
          
          private NVal PrepareBuilder() {
            if (resultIsReadOnly) {
              NVal original = result;
              result = new NVal();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override NVal MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.NVal.Descriptor; }
          }
          
          public override NVal DefaultInstanceForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.NVal.DefaultInstance; }
          }
          
          public override NVal BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is NVal) {
              return MergeFrom((NVal) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(NVal other) {
            if (other == global::TSFCS.DMDS.Server.SendMsg.Types.NVal.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNo) {
              No = other.No;
            }
            if (other.HasVal) {
              Val = other.Val;
            }
            if (other.HasExceed) {
              Exceed = other.Exceed;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_nValFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _nValFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasNo = input.ReadInt32(ref result.no_);
                  break;
                }
                case 16: {
                  result.hasVal = input.ReadSInt32(ref result.val_);
                  break;
                }
                case 24: {
                  result.hasExceed = input.ReadInt32(ref result.exceed_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNo {
            get { return result.hasNo; }
          }
          public int No {
            get { return result.No; }
            set { SetNo(value); }
          }
          public Builder SetNo(int value) {
            PrepareBuilder();
            result.hasNo = true;
            result.no_ = value;
            return this;
          }
          public Builder ClearNo() {
            PrepareBuilder();
            result.hasNo = false;
            result.no_ = 0;
            return this;
          }
          
          public bool HasVal {
            get { return result.hasVal; }
          }
          public int Val {
            get { return result.Val; }
            set { SetVal(value); }
          }
          public Builder SetVal(int value) {
            PrepareBuilder();
            result.hasVal = true;
            result.val_ = value;
            return this;
          }
          public Builder ClearVal() {
            PrepareBuilder();
            result.hasVal = false;
            result.val_ = 0;
            return this;
          }
          
          public bool HasExceed {
            get { return result.hasExceed; }
          }
          public int Exceed {
            get { return result.Exceed; }
            set { SetExceed(value); }
          }
          public Builder SetExceed(int value) {
            PrepareBuilder();
            result.hasExceed = true;
            result.exceed_ = value;
            return this;
          }
          public Builder ClearExceed() {
            PrepareBuilder();
            result.hasExceed = false;
            result.exceed_ = 0;
            return this;
          }
        }
        static NVal() {
          object.ReferenceEquals(global::TSFCS.DMDS.Server.Proto.SendMsg.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LVal : pb::GeneratedMessage<LVal, LVal.Builder> {
        private LVal() { }
        private static readonly LVal defaultInstance = new LVal().MakeReadOnly();
        private static readonly string[] _lValFieldNames = new string[] { "exceed", "no", "val" };
        private static readonly uint[] _lValFieldTags = new uint[] { 24, 8, 16 };
        public static LVal DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override LVal DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override LVal ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_LVal__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<LVal, LVal.Builder> InternalFieldAccessors {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_LVal__FieldAccessorTable; }
        }
        
        public const int NoFieldNumber = 1;
        private bool hasNo;
        private int no_;
        public bool HasNo {
          get { return hasNo; }
        }
        public int No {
          get { return no_; }
        }
        
        public const int ValFieldNumber = 2;
        private bool hasVal;
        private long val_;
        public bool HasVal {
          get { return hasVal; }
        }
        public long Val {
          get { return val_; }
        }
        
        public const int ExceedFieldNumber = 3;
        private bool hasExceed;
        private int exceed_;
        public bool HasExceed {
          get { return hasExceed; }
        }
        public int Exceed {
          get { return exceed_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasVal) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _lValFieldNames;
          if (hasNo) {
            output.WriteInt32(1, field_names[1], No);
          }
          if (hasVal) {
            output.WriteSInt64(2, field_names[2], Val);
          }
          if (hasExceed) {
            output.WriteInt32(3, field_names[0], Exceed);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasNo) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, No);
          }
          if (hasVal) {
            size += pb::CodedOutputStream.ComputeSInt64Size(2, Val);
          }
          if (hasExceed) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, Exceed);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static LVal ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LVal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LVal ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LVal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LVal ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LVal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static LVal ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static LVal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static LVal ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LVal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private LVal MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(LVal prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<LVal, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(LVal cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private LVal result;
          
          private LVal PrepareBuilder() {
            if (resultIsReadOnly) {
              LVal original = result;
              result = new LVal();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override LVal MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.LVal.Descriptor; }
          }
          
          public override LVal DefaultInstanceForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.LVal.DefaultInstance; }
          }
          
          public override LVal BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is LVal) {
              return MergeFrom((LVal) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(LVal other) {
            if (other == global::TSFCS.DMDS.Server.SendMsg.Types.LVal.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNo) {
              No = other.No;
            }
            if (other.HasVal) {
              Val = other.Val;
            }
            if (other.HasExceed) {
              Exceed = other.Exceed;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_lValFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _lValFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasNo = input.ReadInt32(ref result.no_);
                  break;
                }
                case 16: {
                  result.hasVal = input.ReadSInt64(ref result.val_);
                  break;
                }
                case 24: {
                  result.hasExceed = input.ReadInt32(ref result.exceed_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNo {
            get { return result.hasNo; }
          }
          public int No {
            get { return result.No; }
            set { SetNo(value); }
          }
          public Builder SetNo(int value) {
            PrepareBuilder();
            result.hasNo = true;
            result.no_ = value;
            return this;
          }
          public Builder ClearNo() {
            PrepareBuilder();
            result.hasNo = false;
            result.no_ = 0;
            return this;
          }
          
          public bool HasVal {
            get { return result.hasVal; }
          }
          public long Val {
            get { return result.Val; }
            set { SetVal(value); }
          }
          public Builder SetVal(long value) {
            PrepareBuilder();
            result.hasVal = true;
            result.val_ = value;
            return this;
          }
          public Builder ClearVal() {
            PrepareBuilder();
            result.hasVal = false;
            result.val_ = 0;
            return this;
          }
          
          public bool HasExceed {
            get { return result.hasExceed; }
          }
          public int Exceed {
            get { return result.Exceed; }
            set { SetExceed(value); }
          }
          public Builder SetExceed(int value) {
            PrepareBuilder();
            result.hasExceed = true;
            result.exceed_ = value;
            return this;
          }
          public Builder ClearExceed() {
            PrepareBuilder();
            result.hasExceed = false;
            result.exceed_ = 0;
            return this;
          }
        }
        static LVal() {
          object.ReferenceEquals(global::TSFCS.DMDS.Server.Proto.SendMsg.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class FVal : pb::GeneratedMessage<FVal, FVal.Builder> {
        private FVal() { }
        private static readonly FVal defaultInstance = new FVal().MakeReadOnly();
        private static readonly string[] _fValFieldNames = new string[] { "exceed", "no", "val" };
        private static readonly uint[] _fValFieldTags = new uint[] { 24, 8, 21 };
        public static FVal DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override FVal DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override FVal ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_FVal__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<FVal, FVal.Builder> InternalFieldAccessors {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_FVal__FieldAccessorTable; }
        }
        
        public const int NoFieldNumber = 1;
        private bool hasNo;
        private int no_;
        public bool HasNo {
          get { return hasNo; }
        }
        public int No {
          get { return no_; }
        }
        
        public const int ValFieldNumber = 2;
        private bool hasVal;
        private float val_;
        public bool HasVal {
          get { return hasVal; }
        }
        public float Val {
          get { return val_; }
        }
        
        public const int ExceedFieldNumber = 3;
        private bool hasExceed;
        private int exceed_;
        public bool HasExceed {
          get { return hasExceed; }
        }
        public int Exceed {
          get { return exceed_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasVal) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _fValFieldNames;
          if (hasNo) {
            output.WriteInt32(1, field_names[1], No);
          }
          if (hasVal) {
            output.WriteFloat(2, field_names[2], Val);
          }
          if (hasExceed) {
            output.WriteInt32(3, field_names[0], Exceed);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasNo) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, No);
          }
          if (hasVal) {
            size += pb::CodedOutputStream.ComputeFloatSize(2, Val);
          }
          if (hasExceed) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, Exceed);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static FVal ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static FVal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static FVal ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static FVal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static FVal ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static FVal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static FVal ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static FVal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static FVal ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static FVal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private FVal MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(FVal prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<FVal, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(FVal cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private FVal result;
          
          private FVal PrepareBuilder() {
            if (resultIsReadOnly) {
              FVal original = result;
              result = new FVal();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override FVal MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.FVal.Descriptor; }
          }
          
          public override FVal DefaultInstanceForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.FVal.DefaultInstance; }
          }
          
          public override FVal BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is FVal) {
              return MergeFrom((FVal) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(FVal other) {
            if (other == global::TSFCS.DMDS.Server.SendMsg.Types.FVal.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNo) {
              No = other.No;
            }
            if (other.HasVal) {
              Val = other.Val;
            }
            if (other.HasExceed) {
              Exceed = other.Exceed;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_fValFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _fValFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasNo = input.ReadInt32(ref result.no_);
                  break;
                }
                case 21: {
                  result.hasVal = input.ReadFloat(ref result.val_);
                  break;
                }
                case 24: {
                  result.hasExceed = input.ReadInt32(ref result.exceed_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNo {
            get { return result.hasNo; }
          }
          public int No {
            get { return result.No; }
            set { SetNo(value); }
          }
          public Builder SetNo(int value) {
            PrepareBuilder();
            result.hasNo = true;
            result.no_ = value;
            return this;
          }
          public Builder ClearNo() {
            PrepareBuilder();
            result.hasNo = false;
            result.no_ = 0;
            return this;
          }
          
          public bool HasVal {
            get { return result.hasVal; }
          }
          public float Val {
            get { return result.Val; }
            set { SetVal(value); }
          }
          public Builder SetVal(float value) {
            PrepareBuilder();
            result.hasVal = true;
            result.val_ = value;
            return this;
          }
          public Builder ClearVal() {
            PrepareBuilder();
            result.hasVal = false;
            result.val_ = 0F;
            return this;
          }
          
          public bool HasExceed {
            get { return result.hasExceed; }
          }
          public int Exceed {
            get { return result.Exceed; }
            set { SetExceed(value); }
          }
          public Builder SetExceed(int value) {
            PrepareBuilder();
            result.hasExceed = true;
            result.exceed_ = value;
            return this;
          }
          public Builder ClearExceed() {
            PrepareBuilder();
            result.hasExceed = false;
            result.exceed_ = 0;
            return this;
          }
        }
        static FVal() {
          object.ReferenceEquals(global::TSFCS.DMDS.Server.Proto.SendMsg.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DVal : pb::GeneratedMessage<DVal, DVal.Builder> {
        private DVal() { }
        private static readonly DVal defaultInstance = new DVal().MakeReadOnly();
        private static readonly string[] _dValFieldNames = new string[] { "exceed", "no", "val" };
        private static readonly uint[] _dValFieldTags = new uint[] { 24, 8, 17 };
        public static DVal DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override DVal DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override DVal ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_DVal__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<DVal, DVal.Builder> InternalFieldAccessors {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_DVal__FieldAccessorTable; }
        }
        
        public const int NoFieldNumber = 1;
        private bool hasNo;
        private int no_;
        public bool HasNo {
          get { return hasNo; }
        }
        public int No {
          get { return no_; }
        }
        
        public const int ValFieldNumber = 2;
        private bool hasVal;
        private double val_;
        public bool HasVal {
          get { return hasVal; }
        }
        public double Val {
          get { return val_; }
        }
        
        public const int ExceedFieldNumber = 3;
        private bool hasExceed;
        private int exceed_;
        public bool HasExceed {
          get { return hasExceed; }
        }
        public int Exceed {
          get { return exceed_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasVal) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _dValFieldNames;
          if (hasNo) {
            output.WriteInt32(1, field_names[1], No);
          }
          if (hasVal) {
            output.WriteDouble(2, field_names[2], Val);
          }
          if (hasExceed) {
            output.WriteInt32(3, field_names[0], Exceed);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasNo) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, No);
          }
          if (hasVal) {
            size += pb::CodedOutputStream.ComputeDoubleSize(2, Val);
          }
          if (hasExceed) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, Exceed);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static DVal ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DVal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DVal ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DVal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DVal ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DVal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DVal ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DVal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DVal ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DVal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DVal MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DVal prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DVal, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DVal cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private DVal result;
          
          private DVal PrepareBuilder() {
            if (resultIsReadOnly) {
              DVal original = result;
              result = new DVal();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override DVal MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.DVal.Descriptor; }
          }
          
          public override DVal DefaultInstanceForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.DVal.DefaultInstance; }
          }
          
          public override DVal BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is DVal) {
              return MergeFrom((DVal) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(DVal other) {
            if (other == global::TSFCS.DMDS.Server.SendMsg.Types.DVal.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNo) {
              No = other.No;
            }
            if (other.HasVal) {
              Val = other.Val;
            }
            if (other.HasExceed) {
              Exceed = other.Exceed;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_dValFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _dValFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasNo = input.ReadInt32(ref result.no_);
                  break;
                }
                case 17: {
                  result.hasVal = input.ReadDouble(ref result.val_);
                  break;
                }
                case 24: {
                  result.hasExceed = input.ReadInt32(ref result.exceed_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNo {
            get { return result.hasNo; }
          }
          public int No {
            get { return result.No; }
            set { SetNo(value); }
          }
          public Builder SetNo(int value) {
            PrepareBuilder();
            result.hasNo = true;
            result.no_ = value;
            return this;
          }
          public Builder ClearNo() {
            PrepareBuilder();
            result.hasNo = false;
            result.no_ = 0;
            return this;
          }
          
          public bool HasVal {
            get { return result.hasVal; }
          }
          public double Val {
            get { return result.Val; }
            set { SetVal(value); }
          }
          public Builder SetVal(double value) {
            PrepareBuilder();
            result.hasVal = true;
            result.val_ = value;
            return this;
          }
          public Builder ClearVal() {
            PrepareBuilder();
            result.hasVal = false;
            result.val_ = 0D;
            return this;
          }
          
          public bool HasExceed {
            get { return result.hasExceed; }
          }
          public int Exceed {
            get { return result.Exceed; }
            set { SetExceed(value); }
          }
          public Builder SetExceed(int value) {
            PrepareBuilder();
            result.hasExceed = true;
            result.exceed_ = value;
            return this;
          }
          public Builder ClearExceed() {
            PrepareBuilder();
            result.hasExceed = false;
            result.exceed_ = 0;
            return this;
          }
        }
        static DVal() {
          object.ReferenceEquals(global::TSFCS.DMDS.Server.Proto.SendMsg.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class SVal : pb::GeneratedMessage<SVal, SVal.Builder> {
        private SVal() { }
        private static readonly SVal defaultInstance = new SVal().MakeReadOnly();
        private static readonly string[] _sValFieldNames = new string[] { "exceed", "no", "val" };
        private static readonly uint[] _sValFieldTags = new uint[] { 24, 8, 18 };
        public static SVal DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override SVal DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override SVal ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_SVal__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<SVal, SVal.Builder> InternalFieldAccessors {
          get { return global::TSFCS.DMDS.Server.Proto.SendMsg.internal__static_TSFCS_DMDS_Server_SendMsg_SVal__FieldAccessorTable; }
        }
        
        public const int NoFieldNumber = 1;
        private bool hasNo;
        private int no_;
        public bool HasNo {
          get { return hasNo; }
        }
        public int No {
          get { return no_; }
        }
        
        public const int ValFieldNumber = 2;
        private bool hasVal;
        private string val_ = "";
        public bool HasVal {
          get { return hasVal; }
        }
        public string Val {
          get { return val_; }
        }
        
        public const int ExceedFieldNumber = 3;
        private bool hasExceed;
        private int exceed_;
        public bool HasExceed {
          get { return hasExceed; }
        }
        public int Exceed {
          get { return exceed_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasVal) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _sValFieldNames;
          if (hasNo) {
            output.WriteInt32(1, field_names[1], No);
          }
          if (hasVal) {
            output.WriteString(2, field_names[2], Val);
          }
          if (hasExceed) {
            output.WriteInt32(3, field_names[0], Exceed);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasNo) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, No);
          }
          if (hasVal) {
            size += pb::CodedOutputStream.ComputeStringSize(2, Val);
          }
          if (hasExceed) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, Exceed);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static SVal ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SVal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SVal ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SVal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SVal ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SVal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SVal ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SVal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SVal ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SVal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SVal MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SVal prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SVal, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(SVal cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private SVal result;
          
          private SVal PrepareBuilder() {
            if (resultIsReadOnly) {
              SVal original = result;
              result = new SVal();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override SVal MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.SVal.Descriptor; }
          }
          
          public override SVal DefaultInstanceForType {
            get { return global::TSFCS.DMDS.Server.SendMsg.Types.SVal.DefaultInstance; }
          }
          
          public override SVal BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is SVal) {
              return MergeFrom((SVal) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(SVal other) {
            if (other == global::TSFCS.DMDS.Server.SendMsg.Types.SVal.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNo) {
              No = other.No;
            }
            if (other.HasVal) {
              Val = other.Val;
            }
            if (other.HasExceed) {
              Exceed = other.Exceed;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_sValFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _sValFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasNo = input.ReadInt32(ref result.no_);
                  break;
                }
                case 18: {
                  result.hasVal = input.ReadString(ref result.val_);
                  break;
                }
                case 24: {
                  result.hasExceed = input.ReadInt32(ref result.exceed_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNo {
            get { return result.hasNo; }
          }
          public int No {
            get { return result.No; }
            set { SetNo(value); }
          }
          public Builder SetNo(int value) {
            PrepareBuilder();
            result.hasNo = true;
            result.no_ = value;
            return this;
          }
          public Builder ClearNo() {
            PrepareBuilder();
            result.hasNo = false;
            result.no_ = 0;
            return this;
          }
          
          public bool HasVal {
            get { return result.hasVal; }
          }
          public string Val {
            get { return result.Val; }
            set { SetVal(value); }
          }
          public Builder SetVal(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasVal = true;
            result.val_ = value;
            return this;
          }
          public Builder ClearVal() {
            PrepareBuilder();
            result.hasVal = false;
            result.val_ = "";
            return this;
          }
          
          public bool HasExceed {
            get { return result.hasExceed; }
          }
          public int Exceed {
            get { return result.Exceed; }
            set { SetExceed(value); }
          }
          public Builder SetExceed(int value) {
            PrepareBuilder();
            result.hasExceed = true;
            result.exceed_ = value;
            return this;
          }
          public Builder ClearExceed() {
            PrepareBuilder();
            result.hasExceed = false;
            result.exceed_ = 0;
            return this;
          }
        }
        static SVal() {
          object.ReferenceEquals(global::TSFCS.DMDS.Server.Proto.SendMsg.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int BFieldNumber = 2;
    private pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.BVal> b_ = new pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.BVal>();
    public scg::IList<global::TSFCS.DMDS.Server.SendMsg.Types.BVal> BList {
      get { return b_; }
    }
    public int BCount {
      get { return b_.Count; }
    }
    public global::TSFCS.DMDS.Server.SendMsg.Types.BVal GetB(int index) {
      return b_[index];
    }
    
    public const int NFieldNumber = 3;
    private pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.NVal> n_ = new pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.NVal>();
    public scg::IList<global::TSFCS.DMDS.Server.SendMsg.Types.NVal> NList {
      get { return n_; }
    }
    public int NCount {
      get { return n_.Count; }
    }
    public global::TSFCS.DMDS.Server.SendMsg.Types.NVal GetN(int index) {
      return n_[index];
    }
    
    public const int LFieldNumber = 4;
    private pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.LVal> l_ = new pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.LVal>();
    public scg::IList<global::TSFCS.DMDS.Server.SendMsg.Types.LVal> LList {
      get { return l_; }
    }
    public int LCount {
      get { return l_.Count; }
    }
    public global::TSFCS.DMDS.Server.SendMsg.Types.LVal GetL(int index) {
      return l_[index];
    }
    
    public const int FFieldNumber = 5;
    private pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.FVal> f_ = new pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.FVal>();
    public scg::IList<global::TSFCS.DMDS.Server.SendMsg.Types.FVal> FList {
      get { return f_; }
    }
    public int FCount {
      get { return f_.Count; }
    }
    public global::TSFCS.DMDS.Server.SendMsg.Types.FVal GetF(int index) {
      return f_[index];
    }
    
    public const int DFieldNumber = 6;
    private pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.DVal> d_ = new pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.DVal>();
    public scg::IList<global::TSFCS.DMDS.Server.SendMsg.Types.DVal> DList {
      get { return d_; }
    }
    public int DCount {
      get { return d_.Count; }
    }
    public global::TSFCS.DMDS.Server.SendMsg.Types.DVal GetD(int index) {
      return d_[index];
    }
    
    public const int SFieldNumber = 7;
    private pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.SVal> s_ = new pbc::PopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.SVal>();
    public scg::IList<global::TSFCS.DMDS.Server.SendMsg.Types.SVal> SList {
      get { return s_; }
    }
    public int SCount {
      get { return s_.Count; }
    }
    public global::TSFCS.DMDS.Server.SendMsg.Types.SVal GetS(int index) {
      return s_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        foreach (global::TSFCS.DMDS.Server.SendMsg.Types.BVal element in BList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::TSFCS.DMDS.Server.SendMsg.Types.NVal element in NList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::TSFCS.DMDS.Server.SendMsg.Types.LVal element in LList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::TSFCS.DMDS.Server.SendMsg.Types.FVal element in FList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::TSFCS.DMDS.Server.SendMsg.Types.DVal element in DList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::TSFCS.DMDS.Server.SendMsg.Types.SVal element in SList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _sendMsgFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[6], Type);
      }
      if (b_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], b_);
      }
      if (n_.Count > 0) {
        output.WriteMessageArray(3, field_names[4], n_);
      }
      if (l_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], l_);
      }
      if (f_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], f_);
      }
      if (d_.Count > 0) {
        output.WriteMessageArray(6, field_names[1], d_);
      }
      if (s_.Count > 0) {
        output.WriteMessageArray(7, field_names[5], s_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Type);
      }
      foreach (global::TSFCS.DMDS.Server.SendMsg.Types.BVal element in BList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::TSFCS.DMDS.Server.SendMsg.Types.NVal element in NList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::TSFCS.DMDS.Server.SendMsg.Types.LVal element in LList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      foreach (global::TSFCS.DMDS.Server.SendMsg.Types.FVal element in FList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      foreach (global::TSFCS.DMDS.Server.SendMsg.Types.DVal element in DList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      foreach (global::TSFCS.DMDS.Server.SendMsg.Types.SVal element in SList) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SendMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendMsg MakeReadOnly() {
      b_.MakeReadOnly();
      n_.MakeReadOnly();
      l_.MakeReadOnly();
      f_.MakeReadOnly();
      d_.MakeReadOnly();
      s_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SendMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendMsg result;
      
      private SendMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          SendMsg original = result;
          result = new SendMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::TSFCS.DMDS.Server.SendMsg.Descriptor; }
      }
      
      public override SendMsg DefaultInstanceForType {
        get { return global::TSFCS.DMDS.Server.SendMsg.DefaultInstance; }
      }
      
      public override SendMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendMsg) {
          return MergeFrom((SendMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendMsg other) {
        if (other == global::TSFCS.DMDS.Server.SendMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.b_.Count != 0) {
          result.b_.Add(other.b_);
        }
        if (other.n_.Count != 0) {
          result.n_.Add(other.n_);
        }
        if (other.l_.Count != 0) {
          result.l_.Add(other.l_);
        }
        if (other.f_.Count != 0) {
          result.f_.Add(other.f_);
        }
        if (other.d_.Count != 0) {
          result.d_.Add(other.d_);
        }
        if (other.s_.Count != 0) {
          result.s_.Add(other.s_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.b_, global::TSFCS.DMDS.Server.SendMsg.Types.BVal.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.n_, global::TSFCS.DMDS.Server.SendMsg.Types.NVal.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.l_, global::TSFCS.DMDS.Server.SendMsg.Types.LVal.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.f_, global::TSFCS.DMDS.Server.SendMsg.Types.FVal.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.d_, global::TSFCS.DMDS.Server.SendMsg.Types.DVal.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.s_, global::TSFCS.DMDS.Server.SendMsg.Types.SVal.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.BVal> BList {
        get { return PrepareBuilder().b_; }
      }
      public int BCount {
        get { return result.BCount; }
      }
      public global::TSFCS.DMDS.Server.SendMsg.Types.BVal GetB(int index) {
        return result.GetB(index);
      }
      public Builder SetB(int index, global::TSFCS.DMDS.Server.SendMsg.Types.BVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.b_[index] = value;
        return this;
      }
      public Builder SetB(int index, global::TSFCS.DMDS.Server.SendMsg.Types.BVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.b_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddB(global::TSFCS.DMDS.Server.SendMsg.Types.BVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.b_.Add(value);
        return this;
      }
      public Builder AddB(global::TSFCS.DMDS.Server.SendMsg.Types.BVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.b_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeB(scg::IEnumerable<global::TSFCS.DMDS.Server.SendMsg.Types.BVal> values) {
        PrepareBuilder();
        result.b_.Add(values);
        return this;
      }
      public Builder ClearB() {
        PrepareBuilder();
        result.b_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.NVal> NList {
        get { return PrepareBuilder().n_; }
      }
      public int NCount {
        get { return result.NCount; }
      }
      public global::TSFCS.DMDS.Server.SendMsg.Types.NVal GetN(int index) {
        return result.GetN(index);
      }
      public Builder SetN(int index, global::TSFCS.DMDS.Server.SendMsg.Types.NVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.n_[index] = value;
        return this;
      }
      public Builder SetN(int index, global::TSFCS.DMDS.Server.SendMsg.Types.NVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.n_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddN(global::TSFCS.DMDS.Server.SendMsg.Types.NVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.n_.Add(value);
        return this;
      }
      public Builder AddN(global::TSFCS.DMDS.Server.SendMsg.Types.NVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.n_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeN(scg::IEnumerable<global::TSFCS.DMDS.Server.SendMsg.Types.NVal> values) {
        PrepareBuilder();
        result.n_.Add(values);
        return this;
      }
      public Builder ClearN() {
        PrepareBuilder();
        result.n_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.LVal> LList {
        get { return PrepareBuilder().l_; }
      }
      public int LCount {
        get { return result.LCount; }
      }
      public global::TSFCS.DMDS.Server.SendMsg.Types.LVal GetL(int index) {
        return result.GetL(index);
      }
      public Builder SetL(int index, global::TSFCS.DMDS.Server.SendMsg.Types.LVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.l_[index] = value;
        return this;
      }
      public Builder SetL(int index, global::TSFCS.DMDS.Server.SendMsg.Types.LVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.l_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddL(global::TSFCS.DMDS.Server.SendMsg.Types.LVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.l_.Add(value);
        return this;
      }
      public Builder AddL(global::TSFCS.DMDS.Server.SendMsg.Types.LVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.l_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeL(scg::IEnumerable<global::TSFCS.DMDS.Server.SendMsg.Types.LVal> values) {
        PrepareBuilder();
        result.l_.Add(values);
        return this;
      }
      public Builder ClearL() {
        PrepareBuilder();
        result.l_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.FVal> FList {
        get { return PrepareBuilder().f_; }
      }
      public int FCount {
        get { return result.FCount; }
      }
      public global::TSFCS.DMDS.Server.SendMsg.Types.FVal GetF(int index) {
        return result.GetF(index);
      }
      public Builder SetF(int index, global::TSFCS.DMDS.Server.SendMsg.Types.FVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.f_[index] = value;
        return this;
      }
      public Builder SetF(int index, global::TSFCS.DMDS.Server.SendMsg.Types.FVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.f_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddF(global::TSFCS.DMDS.Server.SendMsg.Types.FVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.f_.Add(value);
        return this;
      }
      public Builder AddF(global::TSFCS.DMDS.Server.SendMsg.Types.FVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.f_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeF(scg::IEnumerable<global::TSFCS.DMDS.Server.SendMsg.Types.FVal> values) {
        PrepareBuilder();
        result.f_.Add(values);
        return this;
      }
      public Builder ClearF() {
        PrepareBuilder();
        result.f_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.DVal> DList {
        get { return PrepareBuilder().d_; }
      }
      public int DCount {
        get { return result.DCount; }
      }
      public global::TSFCS.DMDS.Server.SendMsg.Types.DVal GetD(int index) {
        return result.GetD(index);
      }
      public Builder SetD(int index, global::TSFCS.DMDS.Server.SendMsg.Types.DVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.d_[index] = value;
        return this;
      }
      public Builder SetD(int index, global::TSFCS.DMDS.Server.SendMsg.Types.DVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.d_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddD(global::TSFCS.DMDS.Server.SendMsg.Types.DVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.d_.Add(value);
        return this;
      }
      public Builder AddD(global::TSFCS.DMDS.Server.SendMsg.Types.DVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.d_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeD(scg::IEnumerable<global::TSFCS.DMDS.Server.SendMsg.Types.DVal> values) {
        PrepareBuilder();
        result.d_.Add(values);
        return this;
      }
      public Builder ClearD() {
        PrepareBuilder();
        result.d_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::TSFCS.DMDS.Server.SendMsg.Types.SVal> SList {
        get { return PrepareBuilder().s_; }
      }
      public int SCount {
        get { return result.SCount; }
      }
      public global::TSFCS.DMDS.Server.SendMsg.Types.SVal GetS(int index) {
        return result.GetS(index);
      }
      public Builder SetS(int index, global::TSFCS.DMDS.Server.SendMsg.Types.SVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.s_[index] = value;
        return this;
      }
      public Builder SetS(int index, global::TSFCS.DMDS.Server.SendMsg.Types.SVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.s_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddS(global::TSFCS.DMDS.Server.SendMsg.Types.SVal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.s_.Add(value);
        return this;
      }
      public Builder AddS(global::TSFCS.DMDS.Server.SendMsg.Types.SVal.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.s_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeS(scg::IEnumerable<global::TSFCS.DMDS.Server.SendMsg.Types.SVal> values) {
        PrepareBuilder();
        result.s_.Add(values);
        return this;
      }
      public Builder ClearS() {
        PrepareBuilder();
        result.s_.Clear();
        return this;
      }
    }
    static SendMsg() {
      object.ReferenceEquals(global::TSFCS.DMDS.Server.Proto.SendMsg.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
